#summary Golf Markup Language Documentation: complexType Equipment.

== Name ==

*[CEquipment Equipment]*

  	

===  Super Types ===
{{{
anyType
  |
  +--Equipment (restriction)
}}}
----
    

===  Documentation ===
        
			Descriptive elements for golf equipment. Golf clubs should be described using the GolfClub type.
			Other pieces of golf equipment should use the Equipment type: Golf bags, ball, apparel, training aids...
			A attribute named type help describe the equipment.
		
  	
===  Properties ===

  	This component is not nillable.
---- 	
        
===  Model ===

	<...  type = [SEquipmentTypeEnum EquipmentTypeEnum]>  (name, manufacturer, model, submodel?, serial?  )</...>

----
    

=== Nested Element Summary ===
        
|| xs:string || manufacturer ||  					Manufacturer of equipment.				 ||
|| xs:string || model ||  					Model of equipment.				 ||
|| xs:string || name ||  					Name or description of equipment.				 ||
|| xs:string || serial ||  					Serial number of equipment.				 ||
|| xs:string || submodel ||  					Submodel or type of equipment.				 ||      

=== Attributes ===

|| Name || Description || Type || Use || Default || Fixed || Form ||
        
|| type ||  				Type of piece of equipment to organise them in categories: Training devices, clubs, balls...			 || [SEquipmentTypeEnum golfml:EquipmentTypeEnum] || optional ||  ||  || unqualified ||

===  Local Usage ===

    	[CEquipmentList EquipmentList], [CGolfBag GolfBag]
----
    <xs:complexType name="Equipment">  <xs:sequence>    <xs:element name="name" type="xs:string">    </xs:element>    <xs:element name="manufacturer" type="xs:string">    </xs:element>    <xs:element name="model" type="xs:string">    </xs:element>    <xs:element minOccurs="0" name="submodel" type="xs:string">    </xs:element>    <xs:element minOccurs="0" name="serial" type="xs:string">    </xs:element>  </xs:sequence>  <xs:attribute name="type" type="golfml:EquipmentTypeEnum">  </xs:attribute></xs:complexType>
----
        